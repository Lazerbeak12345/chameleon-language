IO=import("io");

//env=import("system").env; /// Location where UNIX enviroment variables are found

tr=import("./lib/syntax-tree");
tk=import("./lib/syntax-tokens");

//If I get stuck, here's some URLs for help 
//https://en.wikipedia.org/wiki/Recursive_descent_parser

// Once This file is "ready" look at these in order to get this thing compiled (in order of appearance)
//https://github.com/antlr/antlr4
//http://aquamentus.com/flex_bison.html
//https://github.com/westes/flex
//https://www.youtube.com/watch?v=54bo1qaHAfk
//https://www.epaperpress.com/lexandyacc/thl.html
//https://www.gnu.org/software/bison/
//https://invisible-island.net/byacc/byacc.html

runFile=Func([Str()],Null());

tokenify=(getNextLine,error)=>{
	Symbol=Type();

	CheckerBuiltIn={
		a={};
		a.builtIn=true;
		a.action=(line,buffer)=>not(a.regexp.matches(buffer+Str(line.get(0))));
		=<a;
	};
	checkers=[
		{
			a=CheckerBuiltIn();
			//NOTE: because we are making a regexp inside a string, escapes must be doubled
			a.regexp="\\/\\/.*\\n";
			a.name="comment";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="\\/\\*(.*)?\\*\\/";
			a.name="multicomment";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="[a-zA-Z_$][a-zA-Z01-9_$]*";//add unicode support later
			a.name="identifier";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="{";
			a.name="openC";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="}";
			a.name="closeC";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="\\(";
			a.name="openP";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="\\)";
			a.name="closeP";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="\\[";
			a.name="openS";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="\\]";
			a.name="closeS";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="\s*";
			a.name="whitespace";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="=>";
			a.name="lamda";//This may not be the correct name
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="=";
			a.name="set";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp=";";
			a.name="semicolon";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp=",";
			a.name="comma";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="\\.";
			a.name="subItem";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="\".*[^\\\\]\"";
			a.name="string";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="'.'";
			a.name="char";
			=<a;
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp="[01-9][01-9_]*(\\.[01-9_]*)?";
			a.name="num";
			=<a;
		}(),
	].each((i,v) {
		Symbol.set(i,v.name);
		Symbol.set(v.name,i);
	});

	sym=Symbol();
	line=getNextLine();
	oreq=(a1,a2)=>(b1,b2)=>eq(a1,a2).or(eq(b1,b2));
	nextSym={
		buffer="";
		isNotValidSymbol=true;
		while(()=>isNotValidSymbol,{
			if(oreq(buffer.len(),0)(sym,-1),{
				buffer=Str(line.get(0));
				line=line.slice(1);
			});
			=<if(eq(line.len(),0),{
				line=getNextLine();
				=<true;//this is basically a continue. Returning false from a while is a break;
			},{
				index=0;
				sym=-1;
				while(()=>index<checkers.len(),{
					if (RegExp(checkers.get(index).regexp).matches(buffer),{
						if(checkers.get(index).action(line,buffer),{
							sym=Symbol.get(checkers.get(index).name);
							index=checkers.len();
							isNotValidSymbol=false;
						});
						if (oreq(sym,Symbol.comment)(sym,Symbol.multicomment),{
							buffer="";
							line=getNextLine();
							isNotValidSymbol=true;
						});
					});
					index.up1();
				})();
			});
		});
	};

	accept=s=>{
		isEq=eq(sym,Symbol.get(s));
		if(isEq,{
			nextSym();
		});
		=<isEq;
	};
	expect=s=>{
		a=accept(s);
		if(not(a),{
			error("Unexpected symbol \""+Symbol.get(sym)+"\"\nWas expecting symbol \""+s+"\" instead.");
		});
		=<a;
	};
	reject=(s,reason)=>{
		isEq=eq(sym,s);
		if(isEq,{
			error("Rejected symbol \""+s"\"\n"+reason);
		});
		=<isEq;
	};

	block={};//Defined here to enable statementValue to work with functions

	/**
	 * It's a function
	 * (named this way to avoid all ambiguity)
	 * @param numberOfArguments the numberOfArguments that it took. Used for syntax stuff
	 * @param preface does it have a preface in front of this (passed in already handled for)
	 */
	afunction=(numberOfArguments,preface)=>{
		hasLamda=false;
		if(preface.and(lte(numberOfArguments,1)),{
			hasLamda=expect("lamda");
		}).elif(gte(numberOfArguments,2),{
			hasLamda=accept("lamda");
		}).else({
			reject("lamda",
				"A zero argument function without any other preface indicators must not have this operator.\nTry removing it, or prefixing it with parentheses");
		});
		hasCurly=false;
		if(preface.and(not(hasLamda)).and(numberOfArguments.gt(1)),{
			reject("openC","You must have the lamda operator for a multi-line function with multiple arguments.");
		}).else({
			hasCurly=accept("openC");
		});
		block();
		if(hasCurly,()=>expect("closeC"))
			.else(()=>reject("closeC","Extra closing curly bracket."));
	};

	statementValueList={};//Needs to work in statementValue

	/**
	 * Something that goes inside a variable.
	 */
	statementValue={//TODO
		if(accept("openP"),{
			accept("whitespace");
			itsAFunc=false;
			argCount=0;
			if(accept("identifier"),{//Is it a function?
				accept("whitespace");
				itsAFunc=true;
				if(accept("comma"),{//two or more arg function
					accept("whitespace");
					argCount=1;
					while({
						accept("whitespace");
						=<if(eq(argCount,1),{
							=<accept("identifier");
						},{
							=<expect("identifier");
						})();
					},{
						argCount.up1();//think a++ ++a is Num.up1(a);
						accept("whitespace");
						=<accept("comma");
					});
				}).elif(accept("closeP"),{//Single arg function
					argCount=1;
					accept("whitespace");
				});
			}).elif(accept("closeP"),{//the only thing this could be is a one line function with no args
				itsAFunc=true;
				accept("whitespace");
			},s);// I guess it's just a paren set
			accept("closeP");
			if(itsAFunc,()=> afunction(count,true));
		}).elif(ss.eq(Symbol.openC),{
			afunction(0,false);
		}).elif(accept("identifier"),{
			//get variable value
			accept("whitespace");
			while(()=>accept("subItem"),{
				expect("identifier");
				accept("whitespace");
			});
			if(accept("openP"),{//call a function
				statementValueList();
				expect("closeP");
			});
		}).elif(accept("string"),{
			//string
		}).elif(accept("char"),{
			//char
		}).elif(accept("num"),{
			//num
		}).elif(accept("openS"),{//Array
			statementValueList();
			accept("closeS");
		});
	};

	/**
	 * A list of statement values. Could either be arguments or an arr
	 */
	statementValueList={
		ranOnce=false;
		while({
			=<or(not(ranOnce),eq(sym,Symbol.comma));
		},{
			if(ranOnce,()=>expect("comma"));
			accept("whitespace");
			statementValue();
			accept("whitespace");
			ranOnce=true;
		});
	};

	/**
	 * Think of it like a single line of a function.
	 */
	action={
		expect("identifier");
		accept("whitespace");
		if(accept("set"),//set or change a value
			statementValue))
		.elif(accept("openP"),{//call a function
			statementValueList();
			expect("closeP");
		});
		expect("semicolon");
	};

	/**
	 * A function, or the internals of a program
	 * @param needsCurls if true, it expects curlys
	 */
	block=needsCurls=>{//A function, or a program
		needsCurls=false;
		if(notoutermost,{
			needsCurls=accept("openC");
		});
		while({
			accept("whitespace");
			=<eq(sym,Symbol.identifier);
		},
			action);
		if(needsCurls,()=>expect("closeC"));
	};

	/**
	 * expect a program. (To be called only once. self-destructive)
	 */
	program={
		nextSym();
		block(false);
		program={};
	};
};

makeTree=(tokens)=>{//I obviusally didn't understand how token trees worked. I'm gonna have just a _grand_ time fixing this.

};

readFile=(name,error)=>{
	file=IO.in.openFile(name);/// The file that is open
	tree=makeTree(
		tokenify(() => file.readLine(),error)
	);
};

compileFile=(name,error)=>{
	tree=readFile(name,val=>{
		error("Compile error in "+name+" :\n"+er);
	},val=>{
		error("Compile error: "+er);
	});//do stuff with tree
};

runFile=name=>{
	runTree(readFile(name,val=>{
		error("Interpreter error in "+name+" :\n"+er);
	}));
};

=<(args => compileFile(args.get(args.size()-1),IO.out.err));
