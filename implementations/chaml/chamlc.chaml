IO=self.import("io");

//env=self.import("system").env; /// Location where UNIX enviroment variables are found

tr=self.import("./lib/syntax-tree");
tk=self.import("./lib/syntax-tokens");

//If I get stuck, here's some URLs for help 
//https://en.wikipedia.org/wiki/Recursive_descent_parser

runFile=Func([Str()],Null());

tokenify=(getNextLine,error)=>{
	Symbol=[
		"num",
		"comment",
		"identifier",
		"endC",
		"whitespace",
		"set",
	].each((index,value) {
		self[value]=index;
	}).ext(Type);

	CheckerBuiltIn={
		a={};
		a.builtIn=true;
		a.action=(line,buffer)=>not(a.regexp.matches(buffer+Str(line[0])));
		self.ret(a);
	};
	checkers=[
		{
			a=CheckerBuiltIn();
			a.regexp=RegExp("\\/\\/.*\n");
			a.name="comment";
			self.ret(a);
		}(),
		{
			a=CheckerBuiltIn();
			//NOTE: because we are making a regexp inside a string, escapes must be doubled
			a.regexp=RegExp("[01-9][01-9_]*(\\.[01-9_]*)?");
			a.name="num";
			self.ret(a);
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp=RegExp("[a-zA-Z_$][a-zA-Z01-9_$]*");//add unicode support later
			a.name="identifier";
			self.ret(a);
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp=RegExp("}");
			a.name="endC";
			self.ret(a);
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp=RegExp("\s*");
			a.name="whitespace";
			self.ret(a);
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp=RegExp("==");
			a.name="eq";
			self.ret(a);
		}(),
		{
			a=CheckerBuiltIn();
			a.regexp=RegExp("=");
			a.name="set";
			self.ret(a);
		}(),
	];

	sym=Symbol();
	line=getNextLine();
	nextSym={
		buffer="";
		isNotValidSymbol=true;
		while(()=>isNotValidSymbol,{
			if(buffer.len()==0,{
				buffer=Str(line[0]);
				line=line.slice(1);
			});
			s=self;
			if(line.len()==0,{
				line=getNextLine();
				s.ret(true);//this is basically a continue. Returning false is a break;
			});
			index=0;
			while(()=>index<checkers.len(),{
				if (checkers[index].regexp.matches(buffer),{
					if(checkers[index].action(line,buffer),{
						sym=Symbol[checkers[index].name];
						index=checkers.len();
						isNotValidSymbol=false;
					});
					if (sym==Symbol["comment"],{
						buffer="";
						line=getNextLine();
						isNotValidSymbol=true;
					});
				});
				index++;
			});
		});
	};

	accept=s=>{
		isEq=sym==s;
		if(isEq,{
			nextSym();
		});
		self.ret(isEq);
	};
	expect=s=>{
		a=accept(s);
		if(not(a),{
			error("Unexpected symbol \""+Symbol[sym]+"\"\nWas expecting symbol \""+Symbol[s]+"\" instead.");
		});
		self.ret(a);
	};

	action={
		accept(Symbol["whitespace"]);
		expect(Symbol["identifier"]);
		if(accept(Symbol["set"]),{
			//TODO
		});
	};

	block={
		while({
			accept(Symbol["whitespace"]);
			self.ret(sym==Symbol["identifier"]);
		},action);
		expect(Symbol["endC"]);
	};

	program={
		nextSym();
		block();
	};
};

makeTree=(tokens)=>{

};

readFile=(name,error)=>{
	file=IO.in.openFile(name);/// The file that is open
	s=self;
	tree=makeTree(
		tokenify(() => file.readLine(),error)
	);
};

compileFile=(name,error)=>{
	tree=readFile(name,val=>{
		error("Compile error in "+name+" :\n"+er);
	},val=>{
		error("Compile error: "+er);
	});//do stuff with tree
}

runFile=name=>{
	runTree(readFile(name,val=>{
		error("Interpreter error in "+name+" :\n"+er);
	}));
}

self.ret(args => compileFile(args[args.length-1],IO.out.err));
